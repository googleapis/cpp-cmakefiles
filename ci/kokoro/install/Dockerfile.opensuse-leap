# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM opensuse/leap:latest AS devtools

## [START INSTALL.md]

# Install the minimal development tools:

# ```bash
RUN zypper refresh && \
    zypper install --allow-downgrade -y cmake gcc gcc-c++ git gzip \
        libcurl-devel libopenssl-devel make tar wget
# ```

# #### Protobuf

# OpenSUSE Leap includes a package for protobuf-2.6, but this is too old to
# support the Google Cloud Platform proto files, or to support gRPC for that
# matter. Manually install protobuf:

# ```bash
WORKDIR /var/tmp/build
RUN wget -q https://github.com/google/protobuf/archive/v3.9.0.tar.gz
RUN tar -xf v3.9.0.tar.gz
WORKDIR /var/tmp/build/protobuf-3.9.0/cmake
RUN cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_SHARED_LIBS=yes \
        -Dprotobuf_BUILD_TESTS=OFF \
        -H. -Bcmake-out
RUN cmake --build cmake-out --target install -- -j $(nproc)
RUN ldconfig
# ```

# #### c-ares

# Recent versions of gRPC require c-ares >= 1.11, while OpenSUSE Leap
# distributes c-ares-1.9. We need some additional development tools to compile
# this library:

# ```bash
RUN zypper refresh && \
    zypper install -y automake libtool
# ```

# Manually install a newer version:

# ```bash
WORKDIR /var/tmp/build
RUN wget -q https://github.com/c-ares/c-ares/archive/cares-1_15_0.tar.gz
RUN tar -xf cares-1_15_0.tar.gz
WORKDIR /var/tmp/build/c-ares-cares-1_15_0
RUN ./buildconf && ./configure && make -j $(nproc)
RUN make install
RUN ldconfig
# ```

# #### gRPC

# The gRPC Makefile uses `which` to determine whether the compiler is available.
# Install this command for the extremely rare case where it may be missing from
# your workstation or build server:

# ```bash
RUN zypper refresh && \
    zypper install -y which
# ```

# Then gRPC can be manually installed using:

# ```bash
WORKDIR /var/tmp/build
RUN wget -q https://github.com/grpc/grpc/archive/v1.22.0.tar.gz
RUN tar -xf v1.22.0.tar.gz
WORKDIR /var/tmp/build/grpc-1.22.0
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig
ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64
ENV PATH=/usr/local/bin:${PATH}
RUN make -j $(nproc)
RUN make install
RUN ldconfig
# ```

FROM devtools AS install

# #### googleapis

# We can now compile and install `googleapis`.

# ```bash
WORKDIR /home/build/cpp-cmakefiles
COPY . /home/build/cpp-cmakefiles
RUN cmake -H. -Bcmake-out
RUN cmake --build cmake-out -- -j $(nproc)
WORKDIR /home/build/cpp-cmakefiles/cmake-out
RUN cmake --build . --target install
# ```

## [END INSTALL.md]

# Verify that the installed files are actually usable
RUN /home/build/cpp-cmakefiles/ci/test-install/compile-test-projects.sh
